# source: http://localhost:4466
# timestamp: Tue Sep 04 2018 14:00:47 GMT+0800 (中国标准时间)

type AggregateBlock {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Block implements Node {
  id: ID!
  hash: String
  preHash: String
  pid: Int
  height: Int
  transCount: Int
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
}

"""A connection to a list of items."""
type BlockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BlockEdge]!
  aggregate: AggregateBlock!
}

input BlockCreateInput {
  hash: String
  preHash: String
  pid: Int
  height: Int
  transCount: Int
  transactions: TransactionCreateManyWithoutBlockerInput
}

input BlockCreateOneWithoutTransactionsInput {
  create: BlockCreateWithoutTransactionsInput
  connect: BlockWhereUniqueInput
}

input BlockCreateWithoutTransactionsInput {
  hash: String
  preHash: String
  pid: Int
  height: Int
  transCount: Int
}

"""An edge in a connection."""
type BlockEdge {
  """The item at the end of the edge."""
  node: Block!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BlockOrderByInput {
  id_ASC
  id_DESC
  hash_ASC
  hash_DESC
  preHash_ASC
  preHash_DESC
  pid_ASC
  pid_DESC
  height_ASC
  height_DESC
  transCount_ASC
  transCount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BlockPreviousValues {
  id: ID!
  hash: String
  preHash: String
  pid: Int
  height: Int
  transCount: Int
}

type BlockSubscriptionPayload {
  mutation: MutationType!
  node: Block
  updatedFields: [String!]
  previousValues: BlockPreviousValues
}

input BlockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlockSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BlockWhereInput
}

input BlockUpdateInput {
  hash: String
  preHash: String
  pid: Int
  height: Int
  transCount: Int
  transactions: TransactionUpdateManyWithoutBlockerInput
}

input BlockUpdateOneWithoutTransactionsInput {
  create: BlockCreateWithoutTransactionsInput
  connect: BlockWhereUniqueInput
  delete: Boolean
  update: BlockUpdateWithoutTransactionsDataInput
  upsert: BlockUpsertWithoutTransactionsInput
}

input BlockUpdateWithoutTransactionsDataInput {
  hash: String
  preHash: String
  pid: Int
  height: Int
  transCount: Int
}

input BlockUpsertWithoutTransactionsInput {
  update: BlockUpdateWithoutTransactionsDataInput!
  create: BlockCreateWithoutTransactionsInput!
}

input BlockWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  preHash: String

  """All values that are not equal to given value."""
  preHash_not: String

  """All values that are contained in given list."""
  preHash_in: [String!]

  """All values that are not contained in given list."""
  preHash_not_in: [String!]

  """All values less than the given value."""
  preHash_lt: String

  """All values less than or equal the given value."""
  preHash_lte: String

  """All values greater than the given value."""
  preHash_gt: String

  """All values greater than or equal the given value."""
  preHash_gte: String

  """All values containing the given string."""
  preHash_contains: String

  """All values not containing the given string."""
  preHash_not_contains: String

  """All values starting with the given string."""
  preHash_starts_with: String

  """All values not starting with the given string."""
  preHash_not_starts_with: String

  """All values ending with the given string."""
  preHash_ends_with: String

  """All values not ending with the given string."""
  preHash_not_ends_with: String
  pid: Int

  """All values that are not equal to given value."""
  pid_not: Int

  """All values that are contained in given list."""
  pid_in: [Int!]

  """All values that are not contained in given list."""
  pid_not_in: [Int!]

  """All values less than the given value."""
  pid_lt: Int

  """All values less than or equal the given value."""
  pid_lte: Int

  """All values greater than the given value."""
  pid_gt: Int

  """All values greater than or equal the given value."""
  pid_gte: Int
  height: Int

  """All values that are not equal to given value."""
  height_not: Int

  """All values that are contained in given list."""
  height_in: [Int!]

  """All values that are not contained in given list."""
  height_not_in: [Int!]

  """All values less than the given value."""
  height_lt: Int

  """All values less than or equal the given value."""
  height_lte: Int

  """All values greater than the given value."""
  height_gt: Int

  """All values greater than or equal the given value."""
  height_gte: Int
  transCount: Int

  """All values that are not equal to given value."""
  transCount_not: Int

  """All values that are contained in given list."""
  transCount_in: [Int!]

  """All values that are not contained in given list."""
  transCount_not_in: [Int!]

  """All values less than the given value."""
  transCount_lt: Int

  """All values less than or equal the given value."""
  transCount_lte: Int

  """All values greater than the given value."""
  transCount_gt: Int

  """All values greater than or equal the given value."""
  transCount_gte: Int
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
}

input BlockWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createBlock(data: BlockCreateInput!): Block!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateBlock(data: BlockUpdateInput!, where: BlockWhereUniqueInput!): Block
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  deletePost(where: PostWhereUniqueInput!): Post
  deleteBlock(where: BlockWhereUniqueInput!): Block
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertBlock(where: BlockWhereUniqueInput!, create: BlockCreateInput!, update: BlockUpdateInput!): Block!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyBlocks(data: BlockUpdateInput!, where: BlockWhereInput): BatchPayload!
  updateManyTransactions(data: TransactionUpdateInput!, where: TransactionWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyBlocks(where: BlockWhereInput): BatchPayload!
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  blocks(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Block]!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  post(where: PostWhereUniqueInput!): Post
  block(where: BlockWhereUniqueInput!): Block
  transaction(where: TransactionWhereUniqueInput!): Transaction
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  blocksConnection(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockConnection!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  block(where: BlockSubscriptionWhereInput): BlockSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
}

type Transaction implements Node {
  id: ID!
  type: Int
  txId: String
  cname: String
  action: String
  ipt: String
  blockId: String
  blocker(where: BlockWhereInput): Block!
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  type: Int
  txId: String
  cname: String
  action: String
  ipt: String
  blockId: String
  blocker: BlockCreateOneWithoutTransactionsInput!
}

input TransactionCreateManyWithoutBlockerInput {
  create: [TransactionCreateWithoutBlockerInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutBlockerInput {
  type: Int
  txId: String
  cname: String
  action: String
  ipt: String
  blockId: String
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  txId_ASC
  txId_DESC
  cname_ASC
  cname_DESC
  action_ASC
  action_DESC
  ipt_ASC
  ipt_DESC
  blockId_ASC
  blockId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  type: Int
  txId: String
  cname: String
  action: String
  ipt: String
  blockId: String
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
}

input TransactionUpdateInput {
  type: Int
  txId: String
  cname: String
  action: String
  ipt: String
  blockId: String
  blocker: BlockUpdateOneWithoutTransactionsInput
}

input TransactionUpdateManyWithoutBlockerInput {
  create: [TransactionCreateWithoutBlockerInput!]
  connect: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutBlockerInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutBlockerInput!]
}

input TransactionUpdateWithoutBlockerDataInput {
  type: Int
  txId: String
  cname: String
  action: String
  ipt: String
  blockId: String
}

input TransactionUpdateWithWhereUniqueWithoutBlockerInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutBlockerDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutBlockerInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutBlockerDataInput!
  create: TransactionCreateWithoutBlockerInput!
}

input TransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  txId: String

  """All values that are not equal to given value."""
  txId_not: String

  """All values that are contained in given list."""
  txId_in: [String!]

  """All values that are not contained in given list."""
  txId_not_in: [String!]

  """All values less than the given value."""
  txId_lt: String

  """All values less than or equal the given value."""
  txId_lte: String

  """All values greater than the given value."""
  txId_gt: String

  """All values greater than or equal the given value."""
  txId_gte: String

  """All values containing the given string."""
  txId_contains: String

  """All values not containing the given string."""
  txId_not_contains: String

  """All values starting with the given string."""
  txId_starts_with: String

  """All values not starting with the given string."""
  txId_not_starts_with: String

  """All values ending with the given string."""
  txId_ends_with: String

  """All values not ending with the given string."""
  txId_not_ends_with: String
  cname: String

  """All values that are not equal to given value."""
  cname_not: String

  """All values that are contained in given list."""
  cname_in: [String!]

  """All values that are not contained in given list."""
  cname_not_in: [String!]

  """All values less than the given value."""
  cname_lt: String

  """All values less than or equal the given value."""
  cname_lte: String

  """All values greater than the given value."""
  cname_gt: String

  """All values greater than or equal the given value."""
  cname_gte: String

  """All values containing the given string."""
  cname_contains: String

  """All values not containing the given string."""
  cname_not_contains: String

  """All values starting with the given string."""
  cname_starts_with: String

  """All values not starting with the given string."""
  cname_not_starts_with: String

  """All values ending with the given string."""
  cname_ends_with: String

  """All values not ending with the given string."""
  cname_not_ends_with: String
  action: String

  """All values that are not equal to given value."""
  action_not: String

  """All values that are contained in given list."""
  action_in: [String!]

  """All values that are not contained in given list."""
  action_not_in: [String!]

  """All values less than the given value."""
  action_lt: String

  """All values less than or equal the given value."""
  action_lte: String

  """All values greater than the given value."""
  action_gt: String

  """All values greater than or equal the given value."""
  action_gte: String

  """All values containing the given string."""
  action_contains: String

  """All values not containing the given string."""
  action_not_contains: String

  """All values starting with the given string."""
  action_starts_with: String

  """All values not starting with the given string."""
  action_not_starts_with: String

  """All values ending with the given string."""
  action_ends_with: String

  """All values not ending with the given string."""
  action_not_ends_with: String
  ipt: String

  """All values that are not equal to given value."""
  ipt_not: String

  """All values that are contained in given list."""
  ipt_in: [String!]

  """All values that are not contained in given list."""
  ipt_not_in: [String!]

  """All values less than the given value."""
  ipt_lt: String

  """All values less than or equal the given value."""
  ipt_lte: String

  """All values greater than the given value."""
  ipt_gt: String

  """All values greater than or equal the given value."""
  ipt_gte: String

  """All values containing the given string."""
  ipt_contains: String

  """All values not containing the given string."""
  ipt_not_contains: String

  """All values starting with the given string."""
  ipt_starts_with: String

  """All values not starting with the given string."""
  ipt_not_starts_with: String

  """All values ending with the given string."""
  ipt_ends_with: String

  """All values not ending with the given string."""
  ipt_not_ends_with: String
  blockId: String

  """All values that are not equal to given value."""
  blockId_not: String

  """All values that are contained in given list."""
  blockId_in: [String!]

  """All values that are not contained in given list."""
  blockId_not_in: [String!]

  """All values less than the given value."""
  blockId_lt: String

  """All values less than or equal the given value."""
  blockId_lte: String

  """All values greater than the given value."""
  blockId_gt: String

  """All values greater than or equal the given value."""
  blockId_gte: String

  """All values containing the given string."""
  blockId_contains: String

  """All values not containing the given string."""
  blockId_not_contains: String

  """All values starting with the given string."""
  blockId_starts_with: String

  """All values not starting with the given string."""
  blockId_not_starts_with: String

  """All values ending with the given string."""
  blockId_ends_with: String

  """All values not ending with the given string."""
  blockId_not_ends_with: String
  blocker: BlockWhereInput
}

input TransactionWhereUniqueInput {
  id: ID
}
